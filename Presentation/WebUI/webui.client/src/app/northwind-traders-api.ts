//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class CustomersClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
    this.http = http;
    this.baseUrl = baseUrl ?? "https://localhost:7006";
  }

  getAll(): Observable<CustomersListVm> {
    let url_ = this.baseUrl + "/Customers";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processGetAll(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetAll(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<CustomersListVm>;
        }
      } else
        return _observableThrow(response_) as any as Observable<CustomersListVm>;
    }));
  }

  protected processGetAll(response: HttpResponseBase): Observable<CustomersListVm> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = CustomersListVm.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<CustomersListVm>(null as any);
  }

  get(id: string): Observable<CustomerDetailVm> {
    let url_ = this.baseUrl + "/Customers/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processGet(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGet(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<CustomerDetailVm>;
        }
      } else
        return _observableThrow(response_) as any as Observable<CustomerDetailVm>;
    }));
  }

  protected processGet(response: HttpResponseBase): Observable<CustomerDetailVm> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = CustomerDetailVm.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException("A server side error occurred.", status, _responseText, _headers, result404);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<CustomerDetailVm>(null as any);
  }
}

@Injectable()
export class ProductsClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
    this.http = http;
    this.baseUrl = baseUrl ?? "https://localhost:7006";
  }

  getAll(): Observable<ProductsListVm> {
    let url_ = this.baseUrl + "/Products";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processGetAll(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetAll(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<ProductsListVm>;
        }
      } else
        return _observableThrow(response_) as any as Observable<ProductsListVm>;
    }));
  }

  protected processGetAll(response: HttpResponseBase): Observable<ProductsListVm> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = ProductsListVm.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<ProductsListVm>(null as any);
  }
}

export class CustomersListVm implements ICustomersListVm {
  customers?: CustomerLookupDto[] | undefined;

  constructor(data?: ICustomersListVm) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data["customers"])) {
        this.customers = [] as any;
        for (let item of _data["customers"])
          this.customers!.push(CustomerLookupDto.fromJS(item));
      }
    }
  }

  static fromJS(data: any): CustomersListVm {
    data = typeof data === 'object' ? data : {};
    let result = new CustomersListVm();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.customers)) {
      data["customers"] = [];
      for (let item of this.customers)
        data["customers"].push(item.toJSON());
    }
    return data;
  }
}

export interface ICustomersListVm {
  customers?: CustomerLookupDto[] | undefined;
}

export class CustomerLookupDto implements ICustomerLookupDto {
  id?: string | undefined;
  name?: string | undefined;

  constructor(data?: ICustomerLookupDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.name = _data["name"];
    }
  }

  static fromJS(data: any): CustomerLookupDto {
    data = typeof data === 'object' ? data : {};
    let result = new CustomerLookupDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["name"] = this.name;
    return data;
  }
}

export interface ICustomerLookupDto {
  id?: string | undefined;
  name?: string | undefined;
}

export class CustomerDetailVm implements ICustomerDetailVm {
  [key: string]: any;
  id?: string | undefined;
  companyName?: string | undefined;
  contactName?: string | undefined;
  contactTitle?: string | undefined;
  address?: string | undefined;
  city?: string | undefined;
  region?: string | undefined;
  postalCode?: string | undefined;
  country?: string | undefined;
  phone?: string | undefined;
  fax?: string | undefined;

  constructor(data?: ICustomerDetailVm) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.companyName = _data["companyName"];
      this.contactName = _data["contactName"];
      this.contactTitle = _data["contactTitle"];
      this.address = _data["address"];
      this.city = _data["city"];
      this.region = _data["region"];
      this.postalCode = _data["postalCode"];
      this.country = _data["country"];
      this.phone = _data["phone"];
      this.fax = _data["fax"];
    }
  }

  static fromJS(data: any): CustomerDetailVm {
    data = typeof data === 'object' ? data : {};
    let result = new CustomerDetailVm();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["companyName"] = this.companyName;
    data["contactName"] = this.contactName;
    data["contactTitle"] = this.contactTitle;
    data["address"] = this.address;
    data["city"] = this.city;
    data["region"] = this.region;
    data["postalCode"] = this.postalCode;
    data["country"] = this.country;
    data["phone"] = this.phone;
    data["fax"] = this.fax;
    return data;
  }
}

export interface ICustomerDetailVm {
  id?: string | undefined;
  companyName?: string | undefined;
  contactName?: string | undefined;
  contactTitle?: string | undefined;
  address?: string | undefined;
  city?: string | undefined;
  region?: string | undefined;
  postalCode?: string | undefined;
  country?: string | undefined;
  phone?: string | undefined;
  fax?: string | undefined;
}

export class ProblemDetails implements IProblemDetails {
  type?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;

  [key: string]: any;

  constructor(data?: IProblemDetails) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      for (var property in _data) {
        if (_data.hasOwnProperty(property))
          this[property] = _data[property];
      }
      this.type = _data["type"];
      this.title = _data["title"];
      this.status = _data["status"];
      this.detail = _data["detail"];
      this.instance = _data["instance"];
    }
  }

  static fromJS(data: any): ProblemDetails {
    data = typeof data === 'object' ? data : {};
    let result = new ProblemDetails();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    for (var property in this) {
      if (this.hasOwnProperty(property))
        data[property] = this[property];
    }
    data["type"] = this.type;
    data["title"] = this.title;
    data["status"] = this.status;
    data["detail"] = this.detail;
    data["instance"] = this.instance;
    return data;
  }
}

export interface IProblemDetails {
  type?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;

  [key: string]: any;
}

export class ProductsListVm implements IProductsListVm {
  products?: ProductDto[] | undefined;
  createEnabled!: boolean;

  constructor(data?: IProductsListVm) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data["products"])) {
        this.products = [] as any;
        for (let item of _data["products"])
          this.products!.push(ProductDto.fromJS(item));
      }
      this.createEnabled = _data["createEnabled"];
    }
  }

  static fromJS(data: any): ProductsListVm {
    data = typeof data === 'object' ? data : {};
    let result = new ProductsListVm();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.products)) {
      data["products"] = [];
      for (let item of this.products)
        data["products"].push(item.toJSON());
    }
    data["createEnabled"] = this.createEnabled;
    return data;
  }
}

export interface IProductsListVm {
  products?: ProductDto[] | undefined;
  createEnabled: boolean;
}

export class ProductDto implements IProductDto {
  productId!: number;
  productName?: string | undefined;
  unitPrice?: number | undefined;
  supplierId?: number | undefined;
  supplierCompanyName?: string | undefined;
  categoryId?: number | undefined;
  categoryName?: string | undefined;
  discontinued!: boolean;

  constructor(data?: IProductDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.productId = _data["productId"];
      this.productName = _data["productName"];
      this.unitPrice = _data["unitPrice"];
      this.supplierId = _data["supplierId"];
      this.supplierCompanyName = _data["supplierCompanyName"];
      this.categoryId = _data["categoryId"];
      this.categoryName = _data["categoryName"];
      this.discontinued = _data["discontinued"];
    }
  }

  static fromJS(data: any): ProductDto {
    data = typeof data === 'object' ? data : {};
    let result = new ProductDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["productId"] = this.productId;
    data["productName"] = this.productName;
    data["unitPrice"] = this.unitPrice;
    data["supplierId"] = this.supplierId;
    data["supplierCompanyName"] = this.supplierCompanyName;
    data["categoryId"] = this.categoryId;
    data["categoryName"] = this.categoryName;
    data["discontinued"] = this.discontinued;
    return data;
  }
}

export interface IProductDto {
  productId: number;
  productName?: string | undefined;
  unitPrice?: number | undefined;
  supplierId?: number | undefined;
  supplierCompanyName?: string | undefined;
  categoryId?: number | undefined;
  categoryName?: string | undefined;
  discontinued: boolean;
}

export class ApiException extends Error {
  override message: string;
  status: number;
  response: string;
  headers: { [key: string]: any; };
  result: any;

  constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isApiException = true;

  static isApiException(obj: any): obj is ApiException {
    return obj.isApiException === true;
  }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
  if (result !== null && result !== undefined)
    return _observableThrow(result);
  else
    return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
  return new Observable<string>((observer: any) => {
    if (!blob) {
      observer.next("");
      observer.complete();
    } else {
      let reader = new FileReader();
      reader.onload = event => {
        observer.next((event.target as any).result);
        observer.complete();
      };
      reader.readAsText(blob);
    }
  });
}
